function CheckPermission(){if(context.Account.Num!==context.FromNum)throw"Access is allowed only from your own account. context.Account.Num:"+context.Account.Num}function sendCoins(t){var e={SumCOIN:t._depositCoin,SumCENT:t._depositCent};0!=t._TeraAcc&&Move(context.Smart.Account,t._TeraAcc,FLOAT_FROM_COIN(e),"t_sc")}function checkIfLastEnd(t){if(t._isPending){if(!(100<context.BlockNum-t._blkNumOfReq))return!1;2<=t._recVerifyCount&&sendCoins(t),t._isPending=!1,t._TeraAcc=0,t._depositCoin=0,t._depositCent=0,t._recVerifyCount=0,WriteState(t)}return!0}function checkIfDaoOp(){if(0!=context.Account.Num)throw"Only DAO account can send to this contract!"}
"public"
function verifyReceiveData(t){CheckPermission();var e,n=ReadState(context.Smart.Account);if(n._isAbnormal)throw"verifyReceiveData:The smart contract is locked due to abnormal state!";if(!(n._isPending&&context.BlockNum-n._blkNumOfReq<=100))throw"No data to be verified.";0==n._TeraAcc?(n._TeraAcc=t.TeraAccNum,n._depositCoin=t.coinNum,n._depositCent=t.centNum,n._EthCurBlkNum=t.EthCurBlkNum,n._EthTxTruncate=t.EthTxTruncate,n._recVerifyCount++,n._totalRecVerifyCount++,(e=ReadState(context.Account.Num))._verifyCount++,WriteState(e)):n._TeraAcc==t.TeraAccNum&&n._depositCoin==t.coinNum&&n._depositCent==t.centNum&&n._EthCurBlkNum==t.EthCurBlkNum&&n._EthTxTruncate==t.EthTxTruncate?(n._recVerifyCount++,n._totalRecVerifyCount++,(e=ReadState(context.Account.Num))._verifyCount++,WriteState(e)):Event({eventName:"receiveDataErr",preBlk:n._abnormalInfoBlkHead,preTr:n._abnormalInfoTrHead,msg:{summitAccountNum:context.FromNum,smart_TeraAcc:n._TeraAcc,smart_coin:n._depositCoin,smart_cent:n._depositCent,smart_ethBlk:n._EthCurBlkNum,smart_ethTr:n._EthTxTruncate,receive_TeraAcc:t.TeraAccNum,receive_coin:t.coinNum,receive_cent:t.centNum,receive_ethBlk:t.EthCurBlkNum,receive_ethTr:t.EthTxTruncate}}),WriteState(n)}
"public"
function broadcastVerifyReq(){CheckPermission();var t=ReadState(context.Smart.Account);if(t._isAbnormal)throw"broadcastVerifyReq:The smart contract is locked due to abnormal state!";checkIfLastEnd(t)?(t._isPending=!0,t._blkNumOfReq=context.BlockNum,WriteState(t),Event({eventName:"verify",EthCurBlkNum:t._EthCurBlkNum,EthTxTruncate:t._EthTxTruncate})):Event({eventName:"info",msg:"Another verification is still pending, Please try again in a minute."})}
"public"
function addErrInfoBlk(t){CheckPermission();var e=ReadState(context.Smart.Account);e._abnormalInfoBlkHead=context.BlockNum,e._abnormalInfoTrHead=context.TrNum,WriteState(e)}function OnCreate(){var t=ReadState(context.Smart.Account);t._EthCurBlkNum=5905802,t._EthTxTruncate="4e09a265df",t._blkNumOfReq=0,t._isPending=!1,t._isAbnormal=!1,t._recVerifyCount=0,t._totalRecVerifyCount=0,t._TeraAcc=0,t._depositCoin=0,t._depositCent=0,t._abnormalInfoBlkHead=0,t._abnormalInfoTrHead=0,WriteState(t)}function OnGet(){}function OnSetSmart(){}function OnDeleteSmart(){}